#!/usr/bin/env bash
set -eu -o pipefail

nix-build
export PATH="./result/bin:$PATH"
export DAPP_SOLC=solc-0.7.5
dapp --version
which dapp

TMPDIR=$(mktemp -d)
dapp testnet --dir "$TMPDIR" & PID=$!
sleep 5
die() {
  echo "shutting down testnet"
  killall dapp dapp-testnet dapp---nix-run dapp---testnet-launch geth
  rm -rf $TMPDIR
}
trap die EXIT

export ETH_FROM=$(cat "$TMPDIR/8545/config/account")
export ETH_RPC_URL=http://127.0.0.1:8545
export ETH_KEYSTORE="$TMPDIR/8545/keystore"
export ETH_PASSWORD=/dev/null
export SETH_CHAINID=99

# deploy the stuff
DAPP_JSON=dapp.sol.json  # get this from radicle-contracts build output
bin=$(<$DAPP_JSON jq -r '.contracts["contracts/deploy/phase0.sol"]["Phase0"].evm.bytecode.object')
export ETH_GAS=12000000
phase0=$(seth send --create "0x$bin" "constructor(address,uint256,address,address,bytes32,string)" $ETH_FROM 172800 $ETH_FROM $ETH_FROM 0x0000000000000000000000000000000000000000000000000000000000000000 '""' --from $ETH_FROM --keystore $ETH_KEYSTORE)

RAD=$(seth call $phase0 "token()(address)")
TIMELOCK=$(seth call $phase0 "timelock()(address)")
RADGOV=$(seth call $phase0 "governor()(address)")
REGISTRAR=$(seth call $phase0 "registrar()(address)")

# force geth to mine a block
nextBlock() {
  seth send $ETH_FROM --value 0 --from $ETH_FROM --keystore $ETH_KEYSTORE
}

set -x
export RADGOV RAD
radgov delegate $ETH_FROM
nextBlock
id=$(radgov propose example)
nextBlock
nextBlock
radgov vote $id true
radgov receipt $id $ETH_FROM
radgov state $id
radgov actions $id
