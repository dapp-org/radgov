#!/usr/bin/env bash
### radgov-proposal -- view a governance proposal
### Usage: radgov view <proposal>
### Propose a governance call from a file.
set -e -o pipefail
[[ $# = 1 ]] || (radgov proposal --help && exit 1)

# the public getter for Proposal omits dynamic data and returns
# the following elements:
#   address proposer;     // Creator of the proposal
#   uint256 eta;          // The timestamp that the proposal will be available for execution, set once the vote succeeds
#   uint256 startBlock;   // The block at which voting begins: holders must delegate their votes prior to this block
#   uint256 endBlock;     // The block at which voting ends: votes must be cast prior to this block
#   uint256 forVotes;     // Current number of votes in favor of this proposal
#   uint256 againstVotes; // Current number of votes in opposition to this proposal
#   bool canceled;        // Flag marking whether the proposal has been canceled
#   bool executed;        // Flag marking whether the proposal has been executed

mapfile -t proposal <<< "$(seth call "$RADGOV" "proposals(uint256)(address,uint256,uint256,uint256,uint256,uint256,bool,bool)" "$1")"

# convert block number to estimated timestamp
epoch() {
  echo "$(($(seth block latest timestamp) + 13 * ($1 - $(seth block latest number))))"
}
estimate() {
  date -d "@$(epoch "$1")"
}

echo "--- Proposal $1 ---"
echo "state:    $(radgov state "$1")"
echo "proposer: $(seth --to-address "${proposal[0]}")"
if [[ ${proposal[1]} = 0 ]]; then
  TIMELOCK="$(seth call "$RADGOV" "timelock()(address)")"
  delay="$(seth call "$TIMELOCK" "delay()(uint256)")"
  echo "eta:     ~$(date -d "@$(($(epoch "${proposal[3]}") + delay))") (earliest estimated)"
else
  echo "eta:      $(date -d "@${proposal[1]}")"
fi
echo "start:   ~$(estimate "${proposal[2]}") [block ${proposal[2]}"]
echo "end:     ~$(estimate "${proposal[3]}") [block ${proposal[3]}"]
echo "for:      $(seth --to-fix 18 "${proposal[4]}")"
echo "against:  $(seth --to-fix 18 "${proposal[5]}")"
echo "canceled: ${proposal[6]}"
echo "executed: ${proposal[7]}"
echo ""
echo "## ACTIONS ##"
radgov actions "$1"
<<< "${RAD_RECEIPTS}," mapfile -t -d, receipts
# shellcheck disable=SC2068
for receipt in ${receipts[@]}; do  # no quotes to exclude empty elements
  echo -e "\n### RECEIPT $receipt ###"
  radgov receipt "$1" "$receipt"
done
